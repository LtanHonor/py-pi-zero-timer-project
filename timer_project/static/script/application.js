// Generated by CoffeeScript 2.4.1
(function() {
  // Yep... Most Folks are going to hate my selection of CoffeeScript... yes, its old and antiquated...
  // yes I should use something more modern...  but as someone who does python development on the regular the
  // convenience of not having to swap code paradigms is my rational...
  window.Application = class Application {
    constructor() {
      this.ko_hours = ko.observable("");
      this.ko_minutes = ko.observable("");
      this.ko_seconds = ko.observable("");
      this.ajax_start_event = ko.observable(false);
      this.ajax_run_event = ko.observable(false);
      this.ajax_started = ko.observable(false);
      this.status_hours = ko.observable("");
      this.status_minutes = ko.observable("");
      this.status_seconds = ko.observable("");
      this.ajax_stop_event = ko.observable(false);
      this.error_body = ko.observable("Error Body");
      this.error_title = ko.observable("Error Title");
      this.show_error = (title, error) => {
        this.error_body(error);
        this.error_title(title);
        return $('#errorModal').modal('show');
      };
      this.cast_number = (value) => {
        if (value === "") {
          return 0;
        }
        value = parseFloat(value);
        if (value === (0/0)) {
          return 0;
        }
        return value;
      };
      this.start_event = () => {
        this.status_hours(this.cast_number(this.ko_hours()));
        this.status_minutes(this.cast_number(this.ko_minutes()));
        this.status_seconds(this.cast_number(this.ko_seconds()));
        this.ajax_start_event(true);
        return $.post('ajax/', {
          request: "ajax_start_event",
          hours: this.ko_hours(),
          minutes: this.ko_minutes(),
          seconds: this.ko_seconds()
        }, (data) => {
          var result;
          this.ajax_start_event(false);
          result = JSON.parse(data);
          if (result.Error) {
            return this.show_error("Timer Start Error", result.Message);
          } else {
            return this.ajax_run_event(true);
          }
        });
      };
      this.stop_event = () => {
        this.ajax_stop_event(true);
        return $.post('ajax/', {
          request: "ajax_stop_event"
        }, (data) => {
          var result;
          this.ajax_stop_event(false);
          result = JSON.parse(data);
          if (result.Error) {
            return this.show_error("Timer Stop Error", result.Message);
          } else {
            return this.ajax_run_event(false);
          }
        });
      };
      this.ajax_stastus = () => {
        return $.post('ajax/', {
          request: "ajax_get_status"
        }, (data) => {
          var base_hour, base_min, base_second, base_time, result;
          this.ajax_started(true);
          result = JSON.parse(data);
          if (result.Error) {
            return this.show_error("Major Timer Error", result.Message);
          } else {
            if (result.Status) {
              base_time = result.Left;
              base_hour = Math.floor(base_time / (60.0 * 60.0));
              base_time -= base_hour * 60.0 * 60.0;
              base_min = Math.floor(base_time / 60.0);
              base_time -= base_min * 60.0;
              base_second = Math.floor(base_time);
              this.status_hours(base_hour);
              this.status_minutes(base_min);
              this.status_seconds(base_second);
              return this.ajax_run_event(true);
            } else {
              return this.ajax_run_event(false);
            }
          }
        });
      };
      this.start_app = () => {
        this.ajax_stastus();
        return window.setInterval(this.ajax_stastus, 500);
      };
    }

  };

  window.app = new window.Application();

  $(function() {
    window.app.start_app();
    return ko.applyBindings(window.app);
  });

}).call(this);

//# sourceMappingURL=application.js.map
